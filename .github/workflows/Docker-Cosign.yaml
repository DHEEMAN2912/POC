# name: Docker Container as Agentt
# on: 
#   push: 
#     branches: 
#       - main
# jobs:  
#   docker-agent:    
#     runs-on: ubuntu-latest    
#     container:      
#       image: dheeman29/new-cosign-image:v1
#     permissions:
#       contents: read
#       security-events: write
#     steps:      
#       # Step 1: Capture SHA256 ID of the Image
#       - name: Capture SHA256 ID of the Image
#         run: |          
#           REPO_DIGESTS=$(docker inspect --format='{{.RepoDigests}}' dheeman29/new-cosign-image:v1) 
#           if [ "$REPO_DIGESTS" == "[]" ]; then
#               echo "Error: RepoDigests is empty. Cannot retrieve SHA256."
#               exit 1
#           fi
#           CONTAINER_SHA256=$(docker inspect --format='{{index .RepoDigests 0}}' dheeman29/new-cosign-image:v1 | sed 's/.*@sha256://')
#           echo "CONTAINER_SHA256=$CONTAINER_SHA256" >> $GITHUB_ENV

#       # Step 2: Verify Container SHA256 ID
#       - name: Verify Container SHA256 ID        
#         run: |          
#           EXPECTED_SHA256="${{ secrets.EXPECTED_SHA256 }}"
#           ACTUAL_SHA256="${{ env.CONTAINER_SHA256 }}"
          
#           if [ "$EXPECTED_SHA256" != "$ACTUAL_SHA256" ]; then
#               echo "SHA256 mismatch. Aborting."
#               exit 1
#           fi
#           echo "SHA256 ID verified successfully."

#       # Step 3: Log in to Docker Hub
#       - name: Log in to Docker Hub
#         env:
#           DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
#           DOCKERHUB_PASSWORD: ${{ secrets.DOCKERHUB_PASSWORD }}
#         run: |
#           echo "Attempting Docker login"
#           echo "$DOCKERHUB_PASSWORD" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin

#       # # Step 4: Run Trivy Vulnerability Scanner
#       # - name: Run Trivy Vulnerability Scanner
#       #   uses: aquasecurity/trivy-action@7b7aa264d83dc58691451798b4d117d53d21edfe
#       #   with:
#       #     image-ref: 'dheeman29/docker-cosign@sha256:${{ env.CONTAINER_SHA256 }}'
#       #     format: 'sarif'  # Output in SARIF format
#       #     output: 'trivy-results.sarif'  # Updated output file name
#       #     severity: 'CRITICAL,HIGH'

#       # # Step 5: Upload Trivy Scan Results to GitHub Security Tab
#       # - name: Upload Trivy Scan Results to GitHub Security Tab
#       #   uses: github/codeql-action/upload-sarif@v3
#       #   with:
#       #     sarif_file: 'trivy-results.sarif'  # Updated file reference
#       #   env:
#       #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

#       # # Step 6: Sign the Container Image (using digest instead of tag)
#       # - name: Sign Container Image
#       #   env:
#       #     COSIGN_KEY: ${{ secrets.COSIGN_KEY }}
#       #     COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSPHRASE }}
#       #   run: |
#       #     echo "Signing the image"
#       #     cosign sign --key env://COSIGN_KEYdheeman29/new-cosign-image@sha256:${{ env.CONTAINER_SHA256 }} --yes

#       # Step 7: Public Key Creation
#       - name: Public Key Creation 
#         env: 
#           COSIGN_KEY: ${{ secrets.COSIGN_KEY }} 
#           COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSPHRASE }} 
#         run: | 
#           cosign public-key --key env://COSIGN_KEY > cosign.pub

#       # Step 8: Verify Image Signature (Key-based)
#       - name: Verify Image Signature (Key-based)
#         run: |
#           cosign verify --key cosign.pub dheeman29/new-cosign-image@sha256:${{ env.CONTAINER_SHA256 }}
#         env:
#           COSIGN_EXPERIMENTAL: "true"

#       # Step 9: Print Hello World from the Container
#       - name: Hello World        
#         run: |
#           echo "Hello World from container agent!"



