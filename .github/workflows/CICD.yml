name: Validate VM UUID, Build, Push, and Validate Docker Image

on:
  push:
    branches:
      - main

jobs:
  # Step 1: Validate VM UUID
  validate-uuid:
    runs-on: [self-hosted, linux-runner]
    steps:
      - name: Clean up faulty Azure CLI sources
        run: |
          sudo rm -f /etc/apt/sources.list.d/azure-cli.list
          sudo rm -f /etc/apt/sources.list.d/azure-cli.sources

      - name: Install Azure CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y apt-transport-https ca-certificates curl gnupg lsb-release
          curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash

      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Get VM Name from Hostname
        run: |
          VM_NAME=$(cat /etc/hostname)
          echo "VM_NAME=${VM_NAME}" >> $GITHUB_ENV

      - name: Check Azure VM UUID
        run: |
          EXPECTED_UUID="${{ secrets.EXPECTED_UUID }}"
          CURRENT_UUID=$(sudo dmidecode | grep UUID | awk '{print $2}')

          if [[ "$CURRENT_UUID" != "$EXPECTED_UUID" ]]; then
            echo "Error: VM UUID does not match. Aborting."
            exit 1
          else
            echo "VM UUID matches. Proceeding..."
          fi

  # Step 2: Build, Push, Sign, and Get SHA of Docker Image
  build-and-push:
    runs-on: [self-hosted, linux-runner]
    needs: validate-uuid
    outputs:
      IMAGE_SHA: ${{ steps.get_image_sha.outputs.IMAGE_SHA }}
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Install Docker
        run: |
          sudo apt-get update
          sudo apt-get install -y docker.io
          sudo systemctl start docker
          sudo systemctl enable docker

      - name: Log in to Docker Hub
        run: |
          echo "${{ secrets.DOCKERHUB_PASSWORD }}" | sudo docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      - name: Build Docker Image
        run: |
          sudo docker build -t ${{ secrets.IMAGE_NAME }} .
          sudo docker tag ${{ secrets.IMAGE_NAME }}:latest ${{ secrets.DOCKER_REGISTRY_URL }}/${{ secrets.IMAGE_NAME }}:${{ secrets.IMAGE_TAG }}

      - name: Push Docker Image to Registry
        run: |
          export DOCKER_CONTENT_TRUST=1
          sudo docker push ${{ secrets.DOCKER_REGISTRY_URL }}/${{ secrets.IMAGE_NAME }}:${{ secrets.IMAGE_TAG }}

      - name: Extract Docker Image SHA256 Digest
        id: get_image_sha
        run: |
          IMAGE_SHA=$(sudo docker inspect --format='{{index .RepoDigests 0}}' ${{ secrets.DOCKER_REGISTRY_URL }}/${{ secrets.IMAGE_NAME }}:${{ secrets.IMAGE_TAG }} | awk -F'@' '{print $2}')
          echo "Image SHA256: $IMAGE_SHA"
          echo "::set-output name=IMAGE_SHA::$IMAGE_SHA"

      - name: Install Cosign for Image Signing
        run: |
          wget https://github.com/sigstore/cosign/releases/download/v1.5.2/cosign-linux-amd64
          chmod +x cosign-linux-amd64
          sudo mv cosign-linux-amd64 /usr/local/bin/cosign

      - name: Debug Image Details
        run: |
          echo "Registry: ${{ secrets.DOCKER_REGISTRY_URL }}"
          echo "Image: ${{ secrets.IMAGE_NAME }}"
          echo "Tag: ${{ secrets.IMAGE_TAG }}"
          echo "Cosign Key: ${{ secrets.COSIGN_KEY }}"

      - name: Sign Docker Image with Cosign
        run: |
          echo "Signing Image: ${{ secrets.DOCKER_REGISTRY_URL }}/${{ secrets.IMAGE_NAME }}:${{ secrets.IMAGE_TAG }}"
          cosign sign --key ${{ secrets.COSIGN_KEY }} "${{ secrets.DOCKER_REGISTRY_URL }}/${{ secrets.IMAGE_NAME }}:${{ secrets.IMAGE_TAG }}"

      - name: Install Trivy for Vulnerability Scanning
        run: |
          sudo apt-get install -y wget
          wget https://github.com/aquasecurity/trivy/releases/download/v0.19.2/trivy_0.19.2_Linux-64bit.deb
          sudo dpkg -i trivy_0.19.2_Linux-64bit.deb

      - name: Scan Docker Image with Trivy
        run: |
          trivy image ${{ secrets.DOCKER_REGISTRY_URL }}/${{ secrets.IMAGE_NAME }}:${{ secrets.IMAGE_TAG }}

  # Step 3: Validate Image SHA256
  validate-image:
    runs-on: [self-hosted, linux-runner]
    needs: build-and-push
    steps:
      - name: Pull Docker Image for Validation
        run: |
          export DOCKER_CONTENT_TRUST=1
          sudo docker pull ${{ secrets.DOCKER_REGISTRY_URL }}/${{ secrets.IMAGE_NAME }}:${{ secrets.IMAGE_TAG }}

      - name: Debug Docker Inspect Output
        run: sudo docker inspect --format='{{index .RepoDigests 0}}' ${{ secrets.DOCKER_REGISTRY_URL }}/${{ secrets.IMAGE_NAME }}:${{ secrets.IMAGE_TAG }}

      - name: Validate Pulled Docker Image SHA256
        run: |
          PULLED_SHA=$(sudo docker inspect --format='{{index .RepoDigests 0}}' ${{ secrets.DOCKER_REGISTRY_URL }}/${{ secrets.IMAGE_NAME }}:${{ secrets.IMAGE_TAG }} | awk -F'@' '{print $2}')
          EXPECTED_SHA="${{ needs.build-and-push.outputs.IMAGE_SHA }}"

          echo "Pulled Image SHA256: $PULLED_SHA"
          echo "Expected Image SHA256: $EXPECTED_SHA"

          if [[ "$PULLED_SHA" != "$EXPECTED_SHA" ]]; then
            echo "Error: Image SHA256 does not match. Aborting."
            exit 1
          else
            echo "Image SHA256 matches. Proceeding..."
          fi

  # Step 4: Next stage (if validation is successful)
  next-stage:
    runs-on: [self-hosted, linux-runner]
    needs: validate-image
    if: success()
    steps:
      - name: Run Next Steps
        run: echo "Test is Successful. Running next stages..."
