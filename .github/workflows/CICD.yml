# name: Validate VM UUID and Run

# on:
#   push:
#     branches:
#       - main

# jobs:
#   validate-uuid:
#     runs-on: [self-hosted, linux-runner]  # Use the same label
#     steps:
#       - name: Clean up faulty Azure CLI sources
#         run: |
#           # Remove any previous erroneous azure-cli sources
#           sudo rm -f /etc/apt/sources.list.d/azure-cli.list
#           sudo rm -f /etc/apt/sources.list.d/azure-cli.sources

#       - name: Install Azure CLI
#         run: |
#           # Update the package list and install prerequisites
#           sudo apt-get update
#           sudo apt-get install -y apt-transport-https ca-certificates curl gnupg lsb-release

#           # Use the official Azure CLI install script
#           curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash

#       - name: Log in to Azure
#         uses: azure/login@v1
#         with:
#           creds: ${{ secrets.AZURE_CREDENTIALS }}  # Uses the secret created earlier

#       - name: Get VM Name from Hostname
#         run: |
#           VM_NAME=$(cat /etc/hostname)
#           echo "VM_NAME=${VM_NAME}" >> $GITHUB_ENV

#       - name: Check Azure VM UUID
#         run: |
#           EXPECTED_UUID="${{ secrets.EXPECTED_UUID }}"  # Use the secret for expected VM UUID
          
#           # Query the VM's UUID using dmidecode
#           CURRENT_UUID=$(sudo dmidecode | grep UUID | awk '{print $2}')

#           echo "Expected VM UUID: $EXPECTED_UUID"
#           echo "Current VM UUID: $CURRENT_UUID"

#           if [[ "$CURRENT_UUID" != "$EXPECTED_UUID" ]]; then
#             echo "Error: VM UUID does not match. Aborting."
#             exit 1
#           else
#             echo "VM UUID matches. Proceeding..."
#           fi

#   next-stage:
#     runs-on: [self-hosted, linux-runner]
#     needs: validate-uuid
#     if: success()  # Only runs if the previous job was successful
#     steps:
#       - name: Run Next Steps
#         run: echo "Test is Successful. Running next stages..."
