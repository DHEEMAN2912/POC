name: Validate VM UUID, Build, Push, and Validate Docker Image

on:
  push:
    branches:
      - main

jobs:
  # Step 1: Validate VM UUID
  validate-uuid:
    runs-on: [self-hosted, linux-runner]
    steps:
      - name: Clean up faulty Azure CLI sources
        run: |
          sudo rm -f /etc/apt/sources.list.d/azure-cli.list
          sudo rm -f /etc/apt/sources.list.d/azure-cli.sources

      - name: Install Azure CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y apt-transport-https ca-certificates curl gnupg lsb-release
          curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash

      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Get VM Name from Hostname
        run: |
          VM_NAME=$(cat /etc/hostname)
          echo "VM_NAME=${VM_NAME}" >> $GITHUB_ENV

      - name: Check Azure VM UUID
        run: |
          EXPECTED_UUID="${{ secrets.EXPECTED_UUID }}"
          CURRENT_UUID=$(sudo dmidecode | grep UUID | awk '{print $2}')

          if [[ "$CURRENT_UUID" != "$EXPECTED_UUID" ]]; then
            echo "Error: VM UUID does not match. Aborting."
            exit 1
          else
            echo "VM UUID matches. Proceeding..."
          fi

  # Step 2: Build, Push, and Get SHA of Docker Image
  build-and-push:
    runs-on: [self-hosted, linux-runner]
    needs: validate-uuid
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Install Docker
        run: |
          sudo apt-get update
          sudo apt-get install -y docker.io
          sudo systemctl start docker
          sudo systemctl enable docker

      - name: Log in to Docker Hub
        run: |
          echo "${{ secrets.DOCKERHUB_PASSWORD }}" | sudo docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      - name: Build Docker Image
        run: |
          sudo docker build -t my-app-image .
          sudo docker tag my-app-image:latest ${{ secrets.DOCKER_REGISTRY_URL }}/my-app-image:latest

      - name: Push Docker Image to Registry
        run: |
          export DOCKER_CONTENT_TRUST=1
          sudo docker push ${{ secrets.DOCKER_REGISTRY_URL }}/my-app-image:latest

      - name: Extract Docker Image SHA256 Digest
        id: get_image_sha
        run: |
          IMAGE_SHA=$(sudo docker inspect --format='{{index .RepoDigests 0}}' ${{ secrets.DOCKER_REGISTRY_URL }}/my-app-image:latest | awk -F'@' '{print $2}')
          echo "Image SHA256: $IMAGE_SHA"
          echo "IMAGE_SHA=$IMAGE_SHA" >> $GITHUB_ENV

      - name: Save Docker Image SHA256 to Build Log
        run: echo "Image SHA256 is ${{ env.IMAGE_SHA }}"

  # Step 3: Validate Image SHA256
  validate-image:
    runs-on: [self-hosted, linux-runner]
    needs: build-and-push
    steps:
      - name: Check IMAGE_SHA Value
        run: echo "IMAGE_SHA value is: ${{ env.IMAGE_SHA }}"

      - name: Pull Docker Image for Validation
        run: |
          export DOCKER_CONTENT_TRUST=1
          sudo docker pull ${{ secrets.DOCKER_REGISTRY_URL }}/my-app-image:latest

      - name: Debug Docker Inspect Output
        run: sudo docker inspect --format='{{index .RepoDigests 0}}' ${{ secrets.DOCKER_REGISTRY_URL }}/my-app-image:latest

      - name: Validate Pulled Docker Image SHA256
        run: |
          PULLED_SHA=$(sudo docker inspect --format='{{index .RepoDigests 0}}' ${{ secrets.DOCKER_REGISTRY_URL }}/my-app-image:latest | awk -F'@' '{print $2}')
          EXPECTED_SHA="${{ env.IMAGE_SHA }}"

          echo "Pulled Image SHA256: $PULLED_SHA"
          echo "Expected Image SHA256: $EXPECTED_SHA"

          if [[ "$PULLED_SHA" != "$EXPECTED_SHA" ]]; then
            echo "Error: Image SHA256 does not match. Aborting."
            exit 1
          else
            echo "Image SHA256 matches. Proceeding..."
          fi

  # Step 4: Next stage (if validation is successful)
  next-stage:
    runs-on: [self-hosted, linux-runner]
    needs: validate-image
    if: success()
    steps:
      - name: Run Next Steps
        run: echo "Test is Successful. Running next stages..."
