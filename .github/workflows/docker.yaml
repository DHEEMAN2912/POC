name: Container Agent Pipeline

on:
  push:
    branches:
      - dev

jobs:
  verify-and-run:
    runs-on: ubuntu-latest  # This specifies the environment for the job; it still runs in a container.

    container:
      image: test:latest  # Specify the Docker image you want to use

    steps:
    - name: Check out the repository
      uses: actions/checkout@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Build Docker Image
      id: build_image
      run: |
        IMAGE_NAME="test"
        IMAGE_TAG="latest"

        # Build the image
        docker build -t $IMAGE_NAME:$IMAGE_TAG .

        # Get the SHA256 ID of the image
        IMAGE_SHA256=$(docker images --no-trunc | grep "$IMAGE_NAME" | grep "$IMAGE_TAG" | awk '{print $3}')
        echo "Image SHA256: $IMAGE_SHA256"

        # Set the image SHA256 as an output
        echo "::set-output name=image_sha256::$IMAGE_SHA256"

    - name: Run Docker Container
      id: run_container
      run: |
        IMAGE_NAME="test"
        IMAGE_TAG="latest"

        # Run the container
        CONTAINER_ID=$(docker run -d $IMAGE_NAME:$IMAGE_TAG)

        # Get the SHA256 ID of the container
        CONTAINER_SHA256=$(docker inspect --format='{{.Id}}' $CONTAINER_ID)
        echo "Container SHA256: $CONTAINER_SHA256"

        # Set the container SHA256 as an output
        echo "::set-output name=container_sha256::$CONTAINER_SHA256"

    - name: Compare SHA256 IDs
      run: |
        if [ "${{ steps.build_image.outputs.image_sha256 }}" == "${{ steps.run_container.outputs.container_sha256 }}" ]; then
            echo "SHA256 IDs match. Running the container as an agent."
            # Add logic to run your tasks inside the container here
        else
            echo "SHA256 IDs do not match. Failing the pipeline."
            exit 1
        fi

    # Additional steps to run tasks in the container
