# name: Build and Verify Container

# on:
#   push:
#     branches:
#       - dev

# jobs:
#   verify-and-run:
#     runs-on: self-hosted  # Use a self-hosted runner

#     container:
#       image: docker:dind  # Use the Docker-in-Docker image
#       options: --privileged  # Allow privileged access
#       volumes:
#         - /var/run/docker.sock:/var/run/docker.sock  # Mount Docker socket from host to container

#     steps:
#     - name: Check Docker Group Membership
#       run: |
#         if groups $USER | grep &>/dev/null '\bdocker\b'; then
#           echo "$USER is part of the docker group."
#         else
#           echo "$USER is NOT part of the docker group. Please add the runner user to the docker group."
#           echo "Run: sudo usermod -aG docker $USER and restart the runner."
#           exit 1
#         fi

#     - name: Check out the repository
#       uses: actions/checkout@v2

#     - name: Set up Docker in Docker
#       run: |
#         # Use sudo to ensure access
#         sudo docker version || true  # Ignore errors if Docker is not yet available

#     - name: Build Docker Image
#       id: build_image
#       run: |
#         IMAGE_NAME=${{ secrets.MY_IMAGE }}
#         IMAGE_TAG=${{ secrets.MY_TAG }}

#         # Use sudo to build the Docker image
#         sudo docker build -t $IMAGE_NAME:$IMAGE_TAG .

#         # Get the SHA256 ID of the image
#         IMAGE_SHA256=$(sudo docker images --no-trunc | grep "$IMAGE_NAME" | grep "$IMAGE_TAG" | awk '{print $3}')
#         echo "Image SHA256: $IMAGE_SHA256"

#         # Set the image SHA256 as an output
#         echo "::set-output name=image_sha256::$IMAGE_SHA256"

#     - name: Run Docker Container
#       id: run_container
#       run: |
#         IMAGE_NAME=${{ secrets.MY_IMAGE }}
#         IMAGE_TAG=${{ secrets.MY_TAG }}

#         # Use sudo to run the container
#         CONTAINER_ID=$(sudo docker run -d $IMAGE_NAME:$IMAGE_TAG)

#         # Get the SHA256 ID of the running container
#         CONTAINER_SHA256=$(sudo docker inspect --format='{{.Id}}' $CONTAINER_ID)
#         echo "Container SHA256: $CONTAINER_SHA256"

#         # Set the container SHA256 as an output
#         echo "::set-output name=container_sha256::$CONTAINER_SHA256"

#     - name: Compare SHA256 IDs
#       run: |
#         if [ "${{ steps.build_image.outputs.image_sha256 }}" == "${{ steps.run_container.outputs.container_sha256 }}" ]; then
#             echo "SHA256 IDs match. Running the container as an agent."
#             echo "Hurrah! We did it. Proceeding to the next stage :)"
#         else
#             echo "SHA256 IDs do not match. Failing the pipeline."
#             exit 1
#         fi



name: Docker Container SHA256 Check with Dynamic SHA256

on:
  push:
    branches:
      - dev

jobs:
  docker_job:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Build Docker image (Zero Trust)
        id: build_image
        run: |
          IMAGE_TAG="my-sample-image:latest"
          # Build the Docker image
          docker build -t $IMAGE_TAG .

          # Get the image SHA256 hash after building the image
          IMAGE_SHA256=$(docker inspect --format='{{.Id}}' $IMAGE_TAG)
          echo "Built image SHA256: $IMAGE_SHA256"
          
          # Output the SHA256 to be used in later steps
          echo "image_sha256=$IMAGE_SHA256" >> $GITHUB_ENV

      - name: Log in to Docker Hub
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login --username "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Tag Docker image
        run: |
          docker tag my-sample-image ${{ secrets.DOCKER_USERNAME }}/my-sample-image:latest

      - name: Push Docker image to Docker Hub
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/my-sample-image:latest

      - name: Run Docker container from pushed image
        run: |
          docker run -d --name my-sample-container ${{ secrets.DOCKER_USERNAME }}/my-sample-image:latest

      - name: Inspect Docker container
        id: inspect_container
        run: |
          CONTAINER_SHA256=$(docker inspect --format='{{.Image}}' my-sample-container)
          echo "Container SHA256: $CONTAINER_SHA256"
          echo "container_sha256=$CONTAINER_SHA256" >> $GITHUB_ENV

      - name: Compare image SHA256 with container SHA256 (Zero Trust)
        run: |
          IMAGE_SHA256="${{ env.image_sha256 }}"
          CONTAINER_SHA256="${{ env.container_sha256 }}"
          
          echo "Built image SHA256: $IMAGE_SHA256"
          echo "Container SHA256: $CONTAINER_SHA256"

          # Compare the two SHA256 hashes
          if [ "$IMAGE_SHA256" == "$CONTAINER_SHA256" ]; then
            echo "SHA256 matches. Success."
          else
            echo "SHA256 does not match. Failing pipeline."
            exit 1
          fi
