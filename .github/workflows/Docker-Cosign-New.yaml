name: Docker Container as Agent

on:
  push:
    branches:
      - main

jobs:
  docker-agent:
    runs-on: ubuntu-latest
    container:
      image: dheeman29/new-cosign-image:v1

    permissions:
      contents: read
      security-events: write

    steps:
      # Step 1: Capture SHA256 ID of the Image
      - name: Capture SHA256 ID of the Image
        run: |
          REPO_DIGESTS=$(docker inspect --format='{{.RepoDigests}}' dheeman29/new-cosign-image:v1)
          if [ "$REPO_DIGESTS" == "[]" ]; then
            echo "Error: RepoDigests is empty. Cannot retrieve SHA256."
            exit 1
          fi
          CONTAINER_SHA256=$(docker inspect --format='{{index .RepoDigests 0}}' dheeman29/new-cosign-image:v1 | sed 's/.*@sha256://')
          echo "CONTAINER_SHA256=$CONTAINER_SHA256" >> $GITHUB_ENV

      # Step 2: Verify Container SHA256 ID
      - name: Verify Container SHA256 ID
        run: |
          EXPECTED_SHA256="${{ secrets.EXPECTED_SHA256 }}"
          ACTUAL_SHA256="${{ env.CONTAINER_SHA256 }}"
          if [ "$EXPECTED_SHA256" != "$ACTUAL_SHA256" ]; then
            echo "SHA256 mismatch. Aborting."
            exit 1
          fi
          echo "SHA256 ID verified successfully."

      # Step 3: Log in to Docker Hub
      - name: Log in to Docker Hub
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_PASSWORD: ${{ secrets.DOCKERHUB_PASSWORD }}
        run: |
          echo "Attempting Docker login"
          echo "$DOCKERHUB_PASSWORD" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin

      # Step 4: Decrypt and Convert Private Key
      - name: Decrypt and Convert Private Key
        env:
          COSIGN_KEY: ${{ secrets.COSIGN_KEY }}
        run: |
          echo "${{ secrets.COSIGN_KEY }}" > encrypted_key.pem
          openssl pkcs8 -inform PEM -outform PEM -in encrypted_key.pem -out decrypted_key.pem -passin env:COSIGN_PASSPHRASE
          openssl pkcs8 -topk8 -inform PEM -outform PEM -in decrypted_key.pem -out key.pem -nocrypt

      # Step 5: Public Key Creation
      - name: Public Key Creation
        env:
          COSIGN_KEY: ${{ secrets.COSIGN_KEY }}
          COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSPHRASE }}
        run: |
          cosign public-key --key key.pem > cosign.pub

      # Step 6: Verify Image Signature (Key-based)
      - name: Verify Image Signature (Key-based)
        run: |
          cosign verify --key cosign.pub dheeman29/new-cosign-image@sha256:${{ env.CONTAINER_SHA256 }}
        env:
          COSIGN_EXPERIMENTAL: "true"

      # Step 7: Print Hello World from the Container
      - name: Hello World
        run: |
          echo "Hello World from container agent!"
