name: Docker Container as Agent
on: 
  push: 
    branches: 
      - main
jobs:  
  docker-agent:    
    runs-on: ubuntu-latest    
    container:      
      image: ${{ secrets.IMAGE_REGISTRY }}/${{ secrets.IMAGE_NAME }}@sha256:${{ secrets.EXPECTED_SHA256 }}  # Using the SHA256 ID as a secret
    permissions:
      contents: read
      security-events: write
    steps:      
      # Step 1: Verify Container SHA256 ID (this step now just verifies)
      - name: Verify Container SHA256 ID        
        run: |          
          EXPECTED_SHA256="${{ secrets.EXPECTED_SHA256 }}"
          ACTUAL_SHA256=$(docker inspect --format='{{index .RepoDigests 0}}' ${{ secrets.IMAGE_REGISTRY }}/${{ secrets.IMAGE_NAME }}@sha256:$EXPECTED_SHA256 | sed 's/.*@sha256://')

          if [ "$EXPECTED_SHA256" != "$ACTUAL_SHA256" ]; then
              echo "SHA256 mismatch. Aborting."
              exit 1
          fi
          echo "SHA256 ID verified successfully."

      # Step 2: Log in to Docker Hub
      - name: Log in to Docker Hub
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_PASSWORD: ${{ secrets.DOCKERHUB_PASSWORD }}
        run: |
          echo "Attempting Docker login"
          echo "$DOCKERHUB_PASSWORD" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin

      # Step 3: Run Trivy Vulnerability Scanner
      - name: Run Trivy Vulnerability Scanner
        uses: aquasecurity/trivy-action@7b7aa264d83dc58691451798b4d117d53d21edfe
        with:
          image-ref: '${{ secrets.IMAGE_REGISTRY }}/${{ secrets.IMAGE_NAME }}@sha256:${{ secrets.EXPECTED_SHA256 }}'
          format: 'sarif'  # Output in SARIF format
          output: 'trivy-results.sarif'  # Updated output file name
          severity: 'CRITICAL,HIGH'

      # Step 4: Upload Trivy Scan Results to GitHub Security Tab
      - name: Upload Trivy Scan Results to GitHub Security Tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'  # Updated file reference
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Step 5: Verify Image Signature (Key-based)
      - name: Verify Image Signature (Key-based)
        run: |
          cosign verify --key cosign.pub ${{ secrets.IMAGE_REGISTRY }}/${{ secrets.IMAGE_NAME }}@sha256:${{ secrets.EXPECTED_SHA256 }}
        env:
          COSIGN_EXPERIMENTAL: "true"

      # Step 6: Print Hello World from the Container
      - name: Hello World        
        run: |
          echo "Hello World from container agent!"
